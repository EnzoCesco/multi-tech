
version: "1"

services:

  # MongoDB
  mongodb:
    image: mongo:latest
    environment:
        # provide your credentials here
        - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
        - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
        - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
        - TZ=America/Montevideo
    command: mongod
    container_name: mongoDB
    ports:
      - "27017:27017"
    volumes:
      - mongodb:/data/db

  # MySQL
  mysqldb:
    image: mysql:latest
    environment:
      # provide your credentials here
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=America/Montevideo
    command: --default-authentication-plugin=mysql_native_password
    container_name: mysqlDB
    ports:
      - 3706:3306
    volumes:
      - mysqldb:/var/lib/mysql

  # Postgres
  postgres:
    image: postgres:latest
    environment:
      # provide your credentials here
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TZ=America/Montevideo
    container_name: postgresDB
    ports:
      - '5432:5432'
    volumes: 
      - postgres:/var/lib/postgresql/data

  # Postgres - PgAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    container_name: pgadmin4
    ports:
      - "5050:80"

  # Nest

  nest:
      container_name: nestjs
      image: nestjs-api:${TAG}
      build:
        context: ./server/nest
        dockerfile: Dockerfile
        target: ${TAG}
      command: npm run start:${TAG}
      ports:
          - 3000:3000
          - 9229:9229
      volumes:
      - ./server/nest:/app

  # Express

  express:
      container_name: expressjs
      image: expressjs-api:${TAG}
      build:
        context: ./server/express
        dockerfile: Dockerfile
        target: ${TAG}
      command: npm run start:${TAG}
      ports:
          - 3001:3000
      volumes:
      - ./server/express:/app

  # DotNet

  dotnet:
      container_name: dotnet
      image: dotnet-api:${TAG}
      environment:
        ASPNETCORE_ENVIRONMENT: Docker-${TAG}
        ASPNETCORE_URLS: http://0.0.0.0:5000
        DOTNET_USE_POLLING_FILE_WATCHER: 1
      build:
        context: ./server/dotNet/dotNet
        dockerfile: Dockerfile
        target: ${TAG}
      volumes:
      - ./server:/app

volumes:
  mongodb: {}
  mysqldb: {}
  postgres: {}
  nest: {}
  express: {}
  dotNet: {}
